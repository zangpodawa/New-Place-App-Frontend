{"ast":null,"code":"var _jsxFileName = \"/Users/dawazangpo/Documents/LAB/MERN-Projects/frontend/src/places/pages/UpdatePlace.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./PlaceForm.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UpdatePlace = () => {\n  _s();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      await sendRequest(`http://localhost:5000/api/places/${placeId}`, \"PATCH\", JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        \"Content-Type\": \"application/json\"\n      });\n      history.push(\"/\");\n    } catch (err) {}\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Could not find place!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      error: error,\n      onClear: clearError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), !isLoading && loadedPlace && /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"place-form\",\n      onSubmit: placeUpdateSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"title\",\n        element: \"input\",\n        type: \"text\",\n        label: \"Title\",\n        validators: [VALIDATOR_REQUIRE()],\n        errorText: \"Please enter a valid title.\",\n        onInput: inputHandler,\n        initialValue: loadedPlace.title,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"description\",\n        element: \"textarea\",\n        label: \"Description\",\n        validators: [VALIDATOR_MINLENGTH(5)],\n        errorText: \"Please enter a valid description (min. 5 characters).\",\n        onInput: inputHandler,\n        initialValue: loadedPlace.description,\n        initialValid: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disabled: !formState.isValid,\n        children: \"UPDATE PLACE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(UpdatePlace, \"2RgxOoOjhmTZM3TVqkaZZscWFzY=\", false, function () {\n  return [useHttpClient, useParams, useHistory, useForm];\n});\n_c = UpdatePlace;\nexport default UpdatePlace;\nvar _c;\n$RefreshReg$(_c, \"UpdatePlace\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useHistory","Input","Button","Card","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","jsxDEV","_jsxDEV","Fragment","_Fragment","UpdatePlace","_s","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","placeId","history","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClear","onSubmit","id","element","type","label","validators","errorText","onInput","initialValue","initialValid","disabled","_c","$RefreshReg$"],"sources":["/Users/dawazangpo/Documents/LAB/MERN-Projects/frontend/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./PlaceForm.css\";\n\nconst UpdatePlace = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `http://localhost:5000/api/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `http://localhost:5000/api/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n        }\n      );\n      history.push(\"/\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </>\n  );\n};\n\nexport default UpdatePlace;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}